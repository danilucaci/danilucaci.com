directive @embedded on OBJECT
directive @collection(name: String!) on OBJECT
directive @index(name: String!) on FIELD
directive @resolver(name: String, paginated: Boolean! = false) on FIELD
directive @relation(name: String) on FIELD
directive @unique(index: String) on FIELD
scalar Date

scalar Long

type Message {
  body: String!
  consentValue: String!
  _id: ID!
  acceptsConsent: Boolean!
  date: String!
  person: Person!
  _ts: Long!
}

input MessageInput {
  person: MessagePersonRelation
  date: String!
  acceptsConsent: Boolean!
  consentValue: String!
  body: String!
}

type MessagePage {
  data: [Message]!
  after: String
  before: String
}

input MessagePersonRelation {
  create: PersonInput
  connect: ID
}

type Mutation {
  createPerson(data: PersonInput!): Person!
  updatePerson(id: ID!, data: PersonInput!): Person
  updateMessage(id: ID!, data: MessageInput!): Message
  createMessage(data: MessageInput!): Message!
  deleteMessage(id: ID!): Message
  deletePerson(id: ID!): Person
}

type Person {
  messages(_size: Int, _cursor: String): MessagePage!
  email: String!
  _id: ID!
  fullName: String
  _ts: Long!
}

input PersonInput {
  email: String!
  fullName: String
  messages: PersonMessagesRelation
}

input PersonMessagesRelation {
  create: [MessageInput]
  connect: [ID]
  disconnect: [ID]
}

type PersonPage {
  data: [Person]!
  after: String
  before: String
}

type Query {
  findPersonByEmail(email: String!): Person
  allPersons(_size: Int, _cursor: String): PersonPage!
  allMessages(_size: Int, _cursor: String): MessagePage!
  findPersonByID(id: ID!): Person
  findMessageByID(id: ID!): Message
}

scalar Time
