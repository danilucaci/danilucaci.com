name: CI PRO

on:
  push:
    branches: [main]

jobs:
  check-skip-run:
    runs-on: ubuntu-latest
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.9.0
        with:
          access_token: ${{ github.token }}

  install:
    needs: check-skip-run
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: install yarn dependencies
        run: yarn --prefer-offline
        if: steps.yarn-cache-dir-path.outputs.dir

  lint:
    needs: install
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: api lint
        run: |
          yarn
          yarn workspace api run lint:js
          yarn workspace api run lint:format:check
        env:
          FB_CERT_TYPE: ${{ secrets.FB_CERT_TYPE }}
          FB_CERT_PROJECT_ID: ${{ secrets.FB_CERT_PROJECT_ID }}
          FB_CERT_PRIVATE_KEY_ID: ${{ secrets.FB_CERT_PRIVATE_KEY_ID }}
          FB_CERT_PRIVATE_KEY: ${{ secrets.FB_CERT_PRIVATE_KEY }}
          FB_CERT_CLIENT_EMAIL: ${{ secrets.FB_CERT_CLIENT_EMAIL }}
          FB_CERT_CLIENT_ID: ${{ secrets.FB_CERT_CLIENT_ID }}
          FB_CERT_AUTH_URI: ${{ secrets.FB_CERT_AUTH_URI }}
          FB_CERT_TOKEN_URI: ${{ secrets.FB_CERT_TOKEN_URI }}
          FB_CERT_AUTH_PROVIDER_X_509_CERT_URL: ${{ secrets.FB_CERT_AUTH_PROVIDER_X_509_CERT_URL }}
          FB_CERT_CLIENT_X_509_CERT_URL: ${{ secrets.FB_CERT_CLIENT_X_509_CERT_URL }}
          MONGO_PROJECT_ID: ${{ secrets.MONGO_PROJECT_ID }}
          MONGO_USERNAME: ${{ secrets.MONGO_USERNAME }}
          MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
          CLIENT_URL: ${{ secrets.CLIENT_URL }}
          EMAIL_USERNAME: ${{ secrets.EMAIL_USERNAME }}
          EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}

      - name: web lint
        run: |
          yarn
          yarn workspace web run lint:js
          yarn workspace web run lint:format:check

  test:
    needs: install
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: api test
        run: |
          yarn
          yarn workspace api run test:ci:all
        env:
          FB_CERT_TYPE: ${{ secrets.FB_CERT_TYPE }}
          FB_CERT_PROJECT_ID: ${{ secrets.FB_CERT_PROJECT_ID }}
          FB_CERT_PRIVATE_KEY_ID: ${{ secrets.FB_CERT_PRIVATE_KEY_ID }}
          FB_CERT_PRIVATE_KEY: ${{ secrets.FB_CERT_PRIVATE_KEY }}
          FB_CERT_CLIENT_EMAIL: ${{ secrets.FB_CERT_CLIENT_EMAIL }}
          FB_CERT_CLIENT_ID: ${{ secrets.FB_CERT_CLIENT_ID }}
          FB_CERT_AUTH_URI: ${{ secrets.FB_CERT_AUTH_URI }}
          FB_CERT_TOKEN_URI: ${{ secrets.FB_CERT_TOKEN_URI }}
          FB_CERT_AUTH_PROVIDER_X_509_CERT_URL: ${{ secrets.FB_CERT_AUTH_PROVIDER_X_509_CERT_URL }}
          FB_CERT_CLIENT_X_509_CERT_URL: ${{ secrets.FB_CERT_CLIENT_X_509_CERT_URL }}
          MONGO_PROJECT_ID: ${{ secrets.MONGO_PROJECT_ID }}
          MONGO_USERNAME: ${{ secrets.MONGO_USERNAME }}
          MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
          CLIENT_URL: ${{ secrets.CLIENT_URL }}
          EMAIL_USERNAME: ${{ secrets.EMAIL_USERNAME }}
          EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}

      - name: web test
        run: |
          yarn
          yarn workspace web run test:ci:all

  publish:
    needs: [lint, test]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Publish
        uses: netlify/actions/build@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
          NETLIFY_BASE: packages/web
          NETLIFY_CMD: yarn workspace web run netlify
          NETLIFY_DIR: packages/web/public
          GATSBY_CONTACT_BASE_URL: ${{ secrets.GATSBY_CONTACT_BASE_URL }}
          GATSBY_DISQUS_SHORTNAME: ${{ secrets.GATSBY_DISQUS_SHORTNAME }}
          GATSBY_DL_CONSENT_COOKIE_NAME: ${{ secrets.GATSBY_DL_CONSENT_COOKIE_NAME }}
          GATSBY_DL_COOKIE_DOMAIN: ${{ secrets.GATSBY_DL_COOKIE_DOMAIN }}
          GATSBY_DL_COOKIE_EXP: ${{ secrets.GATSBY_DL_COOKIE_EXP }}
          GATSBY_DL_COOKIE_NAME: ${{ secrets.GATSBY_DL_COOKIE_NAME }}
          GATSBY_DL_COOKIE_SECURE: ${{ secrets.GATSBY_DL_COOKIE_SECURE }}
          GATSBY_DRIBBBLE_TOKEN: ${{ secrets.GATSBY_DRIBBBLE_TOKEN }}
          GATSBY_FIREBASE_API_KEY: ${{ secrets.GATSBY_FIREBASE_API_KEY }}
          GATSBY_FIREBASE_APP_ID: ${{ secrets.GATSBY_FIREBASE_APP_ID }}
          GATSBY_FIREBASE_AUTH_DOMAIN: ${{ secrets.GATSBY_FIREBASE_AUTH_DOMAIN }}
          GATSBY_FIREBASE_DATABASE_URL: ${{ secrets.GATSBY_FIREBASE_DATABASE_URL }}
          GATSBY_FIREBASE_FUNCTIONS_CONTACT_PING_URL: ${{ secrets.GATSBY_FIREBASE_FUNCTIONS_CONTACT_PING_URL }}
          GATSBY_FIREBASE_FUNCTIONS_CONTACT_URL: ${{ secrets.GATSBY_FIREBASE_FUNCTIONS_CONTACT_URL }}
          GATSBY_FIREBASE_PROJECT_ID: ${{ secrets.GATSBY_FIREBASE_PROJECT_ID }}
          GATSBY_GA_ID: ${{ secrets.GATSBY_GA_ID }}
          GATSBY_SENTRY_URL: ${{ secrets.GATSBY_SENTRY_URL }}
          MAILCHIMP_ENDPOINT: ${{ secrets.MAILCHIMP_ENDPOINT }}
